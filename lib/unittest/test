#!/usr/bin/env php
<?
/*
Copyright (c) 2005-2007, Rasmus Andersson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
define('TEST_SCRIPT_VERSION', '0.1');
require_once dirname(__FILE__).'/../base/boot.php';
import(dirname(__FILE__));

error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
ini_set('log_errors', 0);


class UnitTestCLI extends ConsoleApplication {
	
	public $op = array();
	public $logger = null;
	
	
	public function usage($exitCode = 127) {
		if(!isset($this->op['s']) && !isset($this->op['silent']))
		{
			$this->println(
			"Usage: " . basename($GLOBALS['argv'][0]) . " [options] libpath\n"
			. "Run unit tests on a library.\n"
				. "Options:\n"
				
				. "  -v level      Log verbosity level. Lower values means more details. 0 = debug,\n"
				. "                1 = info, 2 = warnings, 3 = errors, 4 = fatal errors, 5 = off.\n\n"
				
				. "  -s,--silent   Silent. Does not print anything to stdout. Only fatal errors in the\n"
				. "                application itself are printed to stderr.\n\n"
				
				. "  -h,--help     Print this help message and exit\n\n"
				
				. "  -V,--version  Print version information and exit\n"
			, true);
		}
		exit($exitCode);
	}
	
	
	function versionInfo( $part = 'r' ) {
		$v = array('r' => 0, 'd' => '', 'u' => '');
		if(preg_match('/^\$'.'Id: (.+) (\d+) (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.*) (.+) \$$/', '$Id$', $m))
			$v = array(
				'r'  => intval($m[2]),
				'd'  => $m[3],
				'u'  => $m[4]
			);
		return $v;
	}
	
	
	public function main(&$argc, &$argv) {
		
		# Parse options
		$this->op = $this->getopt(array(
			'-v|--verbosity:',
			'-s|--silent',
			'-h|--help',
			'-V|--version'));
		$op =& $this->op;
		
		
		# Print help or version?
		if(isset($op['h']) || isset($op['help']))
			$this->usage(32);
		elseif(isset($op['V'])) {
			$v = $this->versionInfo();
			$this->println(basename($argv[0]).' '.TEST_SCRIPT_VERSION.'.'.$v['r'].' ('.$v['d'].')', true);
			exit(32);
		}
		
		# Silent mode?
		$this->silent = (isset($op['s']) || isset($op['silent']));
		
		# Set libpath
		$libPath = isset($argv[1]) ? $argv[1] : realpath(dirname(__FILE__).'/..');
		if(!is_dir($libPath))
			die("ERROR: libpath does not exist or is not a directory.\n");
		
		# Setup logger
		$log = $this->log = new SimpleLogger(fopen('php://stderr','w'), SimpleLogger::LEVEL_WARN);
		$log->enableFormatting = false;
		if($this->silent) {
			$log->level = SimpleLogger::LEVEL_ERROR;
		}
		elseif(isset($op['v']) || isset($op['verbosity'])) {
			$v = isset($op['v']) ? $op['v'] : $op['verbosity'];
			if(is_numeric($v))
				$log->level = intval($v);
			else
				die("Error: Verbosity argument must be specified as an integer.\n");
		}
		
		
		# Setup Library test case
		$libTest = new UnitLibraryTestCase($libPath);
		$libTest->log = $log;
		$timer = new BenchmarkTimer(true);
		
		
		# Run tests
		$log->warn("Running tests in '$libPath'...\n");
		$libTest->test();
		$cases = $libTest->getCompletedTestCases();
		$timer->stop();
		
		# Gather results
		$passedCases = array();
		$failedCases = array();
		
		foreach($cases as $case) {
			if($case->passed())
				$passedCases[] = $case;
			else
				$failedCases[] = $case;
		}
		
		
		# Display summary
		$hr = "-----------------------------------------------------";
		
		if($log->level < SimpleLogger::LEVEL_WARN)
			$this->println($hr);
		if($libTest->passed())
			$this->println("OK. All ".count($cases)." tests passed.");
		else
			$this->println(count($failedCases)." test FAILED out of a total ".count($cases)." tests.");
		
		$this->println("Done in ".Time::formatAge($timer->getRealTime(), false, false));
		
		
		# Display failed first
		if(count($failedCases)) {
			$this->println("\nFAILED TESTS:");
			foreach($failedCases as $case)
				$this->renderTestCaseResult($case, $hr);
		}
		
		# Then passed
		/*if(count($passedCases)) {
			$this->println("\nSUCCESSFUL TESTS:");
			foreach($passedCases as $case)
				$this->renderTestCaseResult($case, $hr);
		}*/
		
		# Exit status > 0 if not all test passed
		return $libTest->passed() ? 0 : 1;
	}
	
	
	/** Render */
	private function renderTestCaseResult($case, $hr)
	{
		# Assemble class info
		$classInfo = $case->getClassInfo();
		$ifs = $classInfo->getInterfaces();
		$ifNames = array();
		foreach($ifs as $if)
			$ifNames[] = $if->getName();
		
		# Render
		$this->println($hr . "\n"
			. ($classInfo->isAbstract() ? 'abstract ' : '')
			. ($classInfo->isFinal() ? 'final ' : '')
			. ($classInfo->isInterface() ? 'interface ' : 'class ')
			. $classInfo->getName()
			. ($classInfo->getParentClass() ? ' extends '.$classInfo->getParentClass()->getName() : '')
			. ($ifNames ? ' implements '.implode(' ', $ifNames) : '')
			. "\n"
			. 'defined in: ' . $classInfo->getFileName() . "\n");
		
		# Render exception, if any
		if($case->hasException()) {
			$this->println("Exception:\n"
				. ABException::format($case->getException(), true, false));
		}
		
		# Render each assertion
		if($case->getAssertions())
		{
			$numAssertions = count($case->getAssertions());
			$this->println($numAssertions . ' Assertion'.($numAssertions > 1 ? 's' : '').":");
			foreach($case->getAssertions() as $assertion)
				$this->println($assertion->toString());
			$this->println();
		}
	}
}

new UnitTestCLI();

?>
